using System.CodeDom.Compiler;
using System.Text;
using CoreMachine.UnionLike.Extensions;
using CoreMachine.UnionLike.Model;
using Microsoft.CodeAnalysis;

namespace CoreMachine.UnionLike.Composers;

public static class UnionSourceComposer
{
	public static void BuildUnion(SourceProductionContext context, (UnionTarget, GeneratorOptions) input)
	{
		var (unionModel, options) = input;

		if (unionModel is null) return;
		var canAddImplicitOperators = true;

		Dictionary<string, UnionTargetMember> distinctMembers = [];
		foreach (var member in unionModel.Members)
		{
			if (member.Constructor?.Parameters.Any() != true) continue;

			if (distinctMembers.ContainsKey(member.Constructor.TupleSignature))
			{
				canAddImplicitOperators = false;
				continue;
			}

			distinctMembers[member.Constructor.TupleSignature] = member;
		}


		using var output = new StringWriter();
		using var writer = new IndentedTextWriter(output, "\t");

		writer.WriteLine("// <auto-generated/>");

		writer.WriteLine("#nullable enable");
		writer.WriteLine("using CoreMachine.UnionLike;");

		foreach (string usingDirective in unionModel.UsingDirectives) writer.WriteLine($"{usingDirective}");

		StringBuilder? qualificationBuilder = null;

		if (options.GenerateAsyncExtensions || unionModel.GenerateAsyncExtensions)
		{
			qualificationBuilder = new StringBuilder();
			writer.WriteLine("using System.Threading.Tasks;");
		}

		writer.WriteLine();
		writer.WriteLine($"namespace {unionModel.Namespace};");
		writer.WriteLine();

		var parent = unionModel.ParentType;
		var parentCount = 0;


		while (parent is not null)
		{
			qualificationBuilder?.Append(parent.Name + '.');

			writer.WriteLine($"partial {parent.Keyword} {parent.Name} {parent.Constraints}");
			writer.WriteLine(value: '{');
			writer.Indent++;
			parentCount++;
			parent = parent.Child;
		}

		writer.Write($"{unionModel.Modifiers} record {unionModel.FullName} :");
		writer.WriteLine(
			$" Union<{unionModel.FullName}, {unionModel.Members.JoinSelect(m => $"{unionModel.FullName}.{m.Name}")}>"
		);

		writer.WriteLine(value: '{');
		writer.Indent++;

		writer.WriteLine($"private {unionModel.Name}() {{ }}");
		writer.WriteLine();

		foreach (var member in unionModel.Members)
		{
			writer.WriteLine($"{member.Modifiers} record {member.Name} : {unionModel.FullName};");
			writer.WriteLine();
		}

		if (canAddImplicitOperators)
			foreach ((string tuple, var member) in distinctMembers)
			{
				if (member.Constructor is null) continue;

				if (member.Constructor.Parameters.Count() > 1)
				{
					writer.WriteLine(
						$"public static implicit operator {unionModel.FullName}"
					+ $"({tuple} tuple)"
					+ $" => new {member.Name}({member.TupleConstructor});"
					);
				}
				else
				{
					writer.WriteLine($"public static implicit operator {unionModel.FullName}{member.Constructor}");
					writer.WriteLine($"=> new {member.Name}{member.Constructor.ParametersSignature};");
				}

				writer.WriteLine();
			}

		writer.Indent--;
		writer.WriteLine(value: '}');

		for (var i = 0; i < parentCount; i++)
		{
			writer.Indent--;
			writer.WriteLine(value: '}');
		}

		writer.WriteLine();

		if (options.GenerateAsyncExtensions || unionModel.GenerateAsyncExtensions)
			WriteAsyncExtensions(writer, unionModel, qualificationBuilder?.ToString() ?? string.Empty);

		var generatedFileName = $"{unionModel.Name}.g.cs";
		context.AddSource(generatedFileName, output.ToString());
	}

	private static void WriteAsyncExtensions(IndentedTextWriter writer, UnionTarget unionModel, string qualification)
	{
		// Extension methods
		writer.WriteLine($"public static class {unionModel.Name}Ex");
		writer.WriteLine(value: '{');
		writer.Indent++;

		string matchTypeParams = unionModel.TypeParameters.Prepend("TOut").JoinString();
		string fullyQualifiedName = qualification + unionModel.FullName;

	#region Match

		// Task

		// Match
		writer.Write($"public static async Task<TOut> Match<{matchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, TOut> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Match({unionModel.Members.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsync
		writer.Write($"public static async Task<TOut> MatchAsync<{matchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, Task<TOut>> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsync({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsyncValue
		writer.Write($"public static async ValueTask<TOut> MatchAsyncValue<{matchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, ValueTask<TOut>> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsyncValue({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// ValueTask

		// Match
		writer.Write($"public static async ValueTask<TOut> Match<{matchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, TOut> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Match({unionModel.Members.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsync
		writer.Write($"public static async Task<TOut> MatchAsync<{matchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, Task<TOut>> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsync({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsyncValue
		writer.Write($"public static async ValueTask<TOut> MatchAsyncValue<{matchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, ValueTask<TOut>> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsyncValue({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

	#endregion


	#region Switch

		// Task

		// Switch
		writer.WriteLine($"public static async Task Switch{unionModel.GenericDeclaration}(");
		writer.Indent++;
		writer.WriteLine($"this Task<{fullyQualifiedName}> task,");
		writer.WriteLine($"{unionModel.Members.JoinSelect(m => $"Action<{qualification}{m.FullName}> {m.VariableName}")},");
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> (await task.ConfigureAwait(continueOnCaptu	redContext))");
		writer.WriteLine($".Switch({unionModel.Members.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsync
		writer.WriteLine($"public static async Task SwitchAsync{unionModel.GenericDeclaration}(");
		writer.Indent++;
		writer.WriteLine($"this Task<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, Task> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsync({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsyncValue
		writer.WriteLine($"public static async ValueTask SwitchAsyncValue{unionModel.GenericDeclaration}(");
		writer.Indent++;
		writer.WriteLine($"this Task<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, ValueTask> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsyncValue({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// ValueTask

		// Switch
		writer.WriteLine($"public static async ValueTask Switch{unionModel.GenericDeclaration}(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{fullyQualifiedName}> task,");
		writer.WriteLine($"{unionModel.Members.JoinSelect(m => $"Action<{qualification}{m.FullName}> {m.VariableName}")},");
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Switch({unionModel.Members.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsync
		writer.WriteLine($"public static async Task SwitchAsync{unionModel.GenericDeclaration}(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, Task> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsync({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsyncValue
		writer.WriteLine($"public static async ValueTask SwitchAsyncValue{unionModel.GenericDeclaration}(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{fullyQualifiedName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{qualification}{m.FullName}, ValueTask> {m.VariableName}")},"
		);

		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsyncValue({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

	#endregion

		writer.Indent--;
		writer.WriteLine(value: '}');
	}
}
