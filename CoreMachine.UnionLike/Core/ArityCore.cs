using System.CodeDom.Compiler;
using System.Collections.Immutable;
using CoreMachine.UnionLike.Data;
using Microsoft.CodeAnalysis;

namespace CoreMachine.UnionLike.Core;

public static class ArityCore
{
    private record ArityMember(int Arity)
    {
        public string Name => "T" + Arity;
        public string NameVariable => "t" + Arity;
        public string FuncName => "f" + Arity;
        public string FuncDeclaration => $"Func<{Name}, TOut>";
        public string AsyncFuncDeclaration => $"Func<{Name}, Task<TOut>>";
        public string ActName => "a" + Arity;
        public string ActDeclaration => $"Action<{Name}>";
        public string AsyncActDeclaration => $"Func<{Name}, Task>";
    }

    public static void GenerateArities(SourceProductionContext context, ImmutableArray<int> arities)
    {
        foreach (int arity in arities)
        {
            ArityMember[] arityMembers = Enumerable.Range(1, arity).Select(i => new ArityMember(i)).ToArray();

            using var output = new StringWriter();
            using var writer = new IndentedTextWriter(output);

            writer.WriteLine("// <auto-generated/>");
            writer.WriteLine("#nullable enable");
            writer.WriteLine("using System;");
            writer.WriteLine("using System.Threading.Tasks;");
            writer.WriteLine();
            writer.WriteLine("namespace CoreMachine.UnionLike;");
            writer.WriteLine();

            var declaration = $"Union<T, {arityMembers.JoinSelect(m => m.Name)}>";
            writer.WriteLine($"public abstract record {declaration}");
            writer.Indent++;
            writer.WriteLine($"where T : {declaration}");
            foreach (var member in arityMembers)
            {
                writer.WriteLine($"where {member.Name} : T");
            }

            writer.Indent--;

            writer.WriteLine('{');
            writer.Indent++;

            // Match
            writer.WriteLine(
                $"public TOut Match<TOut>({arityMembers.JoinSelect(m => $"{m.FuncDeclaration} {m.FuncName}")}) =>");
            WriteSwitchExpression(writer, arityMembers);

            // MatchAsync
            writer.WriteLine(
                $"public Task<TOut> MatchAsync<TOut>({arityMembers.JoinSelect(m => $"{m.AsyncFuncDeclaration} {m.FuncName}")}) =>");
            WriteSwitchExpression(writer, arityMembers);

            // Switch
            writer.WriteLine(
                $"public void Switch({arityMembers.JoinSelect(m => $"{m.ActDeclaration} {m.ActName}")})");
            writer.WriteLine('{');
            writer.Indent++;
            writer.WriteLine("switch (this)");
            writer.WriteLine('{');
            writer.Indent++;
            foreach (var member in arityMembers)
            {
                writer.WriteLine(
                    $"case {member.Name} {member.NameVariable}: {member.ActName}({member.NameVariable}); break;");
            }

            writer.Indent--;
            writer.WriteLine('}');
            writer.Indent--;
            writer.WriteLine('}');
            writer.WriteLine();

            // SwitchAsync
            writer.WriteLine(
                $"public Task SwitchAsync({arityMembers.JoinSelect(m => $"{m.AsyncActDeclaration} {m.ActName}")}) =>");
            writer.Indent++;
            writer.WriteLine("this switch");
            writer.WriteLine('{');
            writer.Indent++;
            foreach (var member in arityMembers)
            {
                writer.WriteLine($"{member.Name} {member.NameVariable} => {member.ActName}({member.NameVariable}),");
            }

            writer.WriteLine("_ => throw new InvalidOperationException()");
            writer.Indent--;
            writer.WriteLine("};");
            writer.Indent--;
            writer.WriteLine();

            writer.Indent--;
            writer.WriteLine('}');

            var generatedFileName = $"Union.T{arity}.g.cs";
            context.AddSource(generatedFileName, output.ToString());
        }
    }

    private static void WriteSwitchExpression(IndentedTextWriter writer, ArityMember[] arityMembers)
    {
        writer.Indent++;
        writer.WriteLine("this switch");
        writer.WriteLine('{');
        writer.Indent++;
        foreach (var member in arityMembers)
        {
            writer.WriteLine($"{member.Name} {member.NameVariable} => {member.FuncName}({member.NameVariable}),");
        }

        writer.WriteLine("_ => throw new InvalidOperationException()");
        writer.Indent--;
        writer.WriteLine("};");
        writer.Indent--;
        writer.WriteLine();
    }
}