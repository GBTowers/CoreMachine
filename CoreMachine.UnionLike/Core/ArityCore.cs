using System.CodeDom.Compiler;
using System.Collections.Immutable;
using CoreMachine.UnionLike.Extensions;
using Microsoft.CodeAnalysis;

namespace CoreMachine.UnionLike.Core;

public static class ArityCore
{
	public static void GenerateArity(SourceProductionContext context, Union union)
	{
		using var output = new StringWriter();
		using var writer = new IndentedTextWriter(output, "\t");

		writer.WriteLine("// <auto-generated/>");
		writer.WriteLine("#nullable enable");
		writer.WriteLine("using System;");
		writer.WriteLine("using System.Threading.Tasks;");
		writer.WriteLine();
		writer.WriteLine("namespace CoreMachine.UnionLike;");
		writer.WriteLine();


		writer.WriteLine($"public abstract record {union.Declaration}");
		writer.Indent++;
		writer.WriteLine(union.WhereClauses);
		writer.Indent--;

		writer.WriteLine('{');
		writer.Indent++;

		#region Match

		// Match
		writer.WriteLine(
			$"public TOut Match<TOut>({union.ArityMembers.JoinSelect(m => $"{m.FuncDeclaration} {m.FuncName}")}) =>");
		writer.WriteSwitchExpression(union.ArityMembers, isMatch: true);

		// MatchAsync
		writer.WriteLine(
			$"public Task<TOut> MatchAsync<TOut>({union.ArityMembers.JoinSelect(m => $"{m.AsyncFuncDeclaration} {m.FuncName}")}) =>");
		writer.WriteSwitchExpression(union.ArityMembers, isMatch: true);

		// MatchAsyncValue
		writer.WriteLine(
			$"public ValueTask<TOut> MatchAsyncValue<TOut>({union.ArityMembers.JoinSelect(m => $"{m.AsyncValueFuncDeclaration} {m.FuncName}")}) =>");
		writer.WriteSwitchExpression(union.ArityMembers, isMatch: true);

		#endregion

		#region Switch

		// Switch
		writer.WriteLine(
			$"public void Switch({union.ArityMembers.JoinSelect(m => $"{m.ActDeclaration} {m.ActName}")})");
		writer.WriteLine('{');
		writer.Indent++;
		writer.WriteLine("switch (this)");
		writer.WriteLine('{');
		writer.Indent++;
		foreach (var member in union.ArityMembers)
			writer.WriteLine(
				$"case {member.Name} {member.VariableName}: {member.ActName}({member.VariableName}); break;");

		writer.Indent--;
		writer.WriteLine('}');
		writer.Indent--;
		writer.WriteLine('}');
		writer.WriteLine();

		// SwitchAsync
		writer.WriteLine(
			$"public Task SwitchAsync({union.ArityMembers.JoinSelect(m => $"{m.AsyncActDeclaration} {m.ActName}")}) =>");
		writer.WriteSwitchExpression(union.ArityMembers, isMatch: false);

		// SwitchAsyncValue
		writer.WriteLine(
			$"public ValueTask SwitchAsyncValue({union.ArityMembers.JoinSelect(m => $"{m.AsyncValueActDeclaration} {m.ActName}")}) =>");
		writer.WriteSwitchExpression(union.ArityMembers, isMatch: false);

		#endregion


		writer.Indent--;
		writer.WriteLine('}');

		writer.WriteLine();

		// Extension methods
		writer.WriteLine($"public static class UnionT{union.Arity}Ex");
		writer.WriteLine('{');
		writer.Indent++;

		#region MatchEx

		// Match
		writer.Write($"public static async Task<TOut> Match<{union.MatchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{union.Declaration}> task,");
		writer.WriteLine(union.ArityMembers.JoinSelect(member => $"{member.FuncDeclaration} {member.VariableName}") + ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Match({union.ArityMembers.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsync
		writer.Write($"public static async Task<TOut> MatchAsync<{union.MatchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{union.Declaration}> task,");
		writer.WriteLine(union.ArityMembers.JoinSelect(member => $"{member.AsyncFuncDeclaration} {member.VariableName}") +
		                 ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsync({union.ArityMembers.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsyncValue
		writer.Write($"public static async ValueTask<TOut> MatchAsyncValue<{union.MatchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{union.Declaration}> task,");
		writer.WriteLine(
			union.ArityMembers.JoinSelect(member => $"{member.AsyncValueFuncDeclaration} {member.VariableName}") + ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsyncValue({union.ArityMembers.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		#endregion

		#region MatchValueEx

		// Match
		writer.Write($"public static async ValueTask<TOut> Match<{union.MatchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{union.Declaration}> valueTask,");
		writer.WriteLine(union.ArityMembers.JoinSelect(member => $"{member.FuncDeclaration} {member.VariableName}") + ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> (await valueTask.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Match({union.ArityMembers.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsync
		writer.Write($"public static async Task<TOut> MatchAsync<{union.MatchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{union.Declaration}> valueTask,");
		writer.WriteLine(union.ArityMembers.JoinSelect(member => $"{member.AsyncFuncDeclaration} {member.VariableName}") +
		                 ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> await (await valueTask.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsync({union.ArityMembers.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsyncValue
		writer.Write($"public static async ValueTask<TOut> MatchAsyncValue<{union.MatchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{union.Declaration}> valueTask,");
		writer.WriteLine(
			union.ArityMembers.JoinSelect(member => $"{member.AsyncValueFuncDeclaration} {member.VariableName}") + ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> await (await valueTask.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsyncValue({union.ArityMembers.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		#endregion

		#region SwitchEx

		// Switch
		writer.Write($"public static async Task Switch<{union.TypeParameters}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{union.Declaration}> task,");
		writer.WriteLine(union.ArityMembers.JoinSelect(member => $"{member.ActDeclaration} {member.VariableName}") + ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Switch({union.ArityMembers.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsync
		writer.Write($"public static async Task SwitchAsync<{union.TypeParameters}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{union.Declaration}> task,");
		writer.WriteLine(union.ArityMembers.JoinSelect(member => $"{member.AsyncActDeclaration} {member.VariableName}") +
		                 ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsync({union.ArityMembers.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsyncValue
		writer.Write($"public static async ValueTask SwitchAsyncValue<{union.TypeParameters}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{union.Declaration}> task,");
		writer.WriteLine(
			union.ArityMembers.JoinSelect(member => $"{member.AsyncValueActDeclaration} {member.VariableName}") + ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsyncValue({union.ArityMembers.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		#endregion

		#region SwitchValueEx

		// Switch
		writer.Write($"public static async ValueTask Switch<{union.TypeParameters}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{union.Declaration}> valueTask,");
		writer.WriteLine(union.ArityMembers.JoinSelect(member => $"{member.ActDeclaration} {member.VariableName}") + ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> (await valueTask.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Switch({union.ArityMembers.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsync
		writer.Write($"public static async Task SwitchAsync<{union.TypeParameters}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{union.Declaration}> valueTask,");
		writer.WriteLine(union.ArityMembers.JoinSelect(member => $"{member.AsyncActDeclaration} {member.VariableName}") +
		                 ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> await (await valueTask.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsync({union.ArityMembers.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsyncValue
		writer.Write($"public static async ValueTask SwitchAsyncValue<{union.TypeParameters}>(");
		writer.Indent++;
		writer.WriteLine($"this ValueTask<{union.Declaration}> valueTask,");
		writer.WriteLine(
			union.ArityMembers.JoinSelect(member => $"{member.AsyncValueActDeclaration} {member.VariableName}") + ',');
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine(union.WhereClauses);
		writer.WriteLine("=> await (await valueTask.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsyncValue({union.ArityMembers.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		#endregion

		writer.Indent--;
		writer.WriteLine('}');

		var generatedFileName = $"Union.T{union.Arity}.g." +
		                        $"cs";
		context.AddSource(generatedFileName, output.ToString());
	}

	private static void WriteSwitchExpression(
		this IndentedTextWriter writer,
		ArityMember[] arityMembers,
		bool isMatch)
	{
		writer.Indent++;
		writer.WriteLine("this switch");
		writer.WriteLine('{');
		writer.Indent++;

		foreach (var member in arityMembers)
			writer.WriteLine(isMatch
				? $"{member.Name} {member.VariableName} => {member.FuncName}({member.VariableName}),"
				: $"{member.Name} {member.VariableName} => {member.ActName}({member.VariableName}),");

		writer.WriteLine("_ => throw new InvalidOperationException()");
		writer.Indent--;
		writer.WriteLine("};");
		writer.Indent--;
		writer.WriteLine();
	}
}


