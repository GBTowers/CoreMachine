using System.CodeDom.Compiler;
using CoreMachine.UnionLike.Extensions;
using CoreMachine.UnionLike.Model;
using Microsoft.CodeAnalysis;

namespace CoreMachine.UnionLike.Core;

public static class UnionCore
{
	public static void BuildUnion(SourceProductionContext context, UnionToGenerate? unionModel)
	{
		if (unionModel is null) return;
		var canAddImplicitOperators = true;

		Dictionary<string, UnionMemberToGenerate> distinctMembers = [];
		foreach (var member in unionModel.Members)
		{
			if (member.Constructor?.Parameters.Any() != true) continue;

			if (distinctMembers.ContainsKey(member.Constructor.TupleSignature))
			{
				canAddImplicitOperators = false;
				continue;
			}

			distinctMembers[member.Constructor.TupleSignature] = member;
		}


		using var output = new StringWriter();
		using var writer = new IndentedTextWriter(output, "\t");

		writer.WriteLine("// <auto-generated/>");
		writer.WriteLine("#nullable enable");
		writer.WriteLine("using System.Diagnostics.CodeAnalysis;");
		writer.WriteLine("using CoreMachine.UnionLike;");
		writer.WriteLine("using System.Threading.Tasks;");
		writer.WriteLine("using System;");
		writer.WriteLine();
		writer.WriteLine($"namespace {unionModel.Namespace};");
		writer.WriteLine();

		writer.Write(
			$"{unionModel.Modifiers} record {unionModel.FullName} :");
		writer.WriteLine(
			$" Union<{unionModel.FullName}, {unionModel.Members.JoinSelect(m => $"{unionModel.FullName}.{m.Name}")}>");
		writer.WriteLine('{');
		writer.Indent++;

		writer.WriteLine($"private {unionModel.Name}() {{ }}");
		writer.WriteLine();

		foreach (var member in unionModel.Members)
		{
			writer.WriteLine($"{member.Modifiers} record {member.Name} : {unionModel.FullName};");
			writer.WriteLine();
		}

		if (canAddImplicitOperators)
			foreach ((string tuple, var member) in distinctMembers)
			{
				if (member.Constructor is null)
					continue;

				if (member.Constructor.Parameters.Count() > 1)
				{
					writer.WriteLine(
						$"public static implicit operator {unionModel.FullName}" +
						$"({tuple} tuple)" +
						$" => new {member.Name}({member.TupleConstructor});");
				}
				else
				{
					writer.WriteLine(
						$"public static implicit operator {unionModel.FullName}{member.Constructor}");
					writer.WriteLine(
						$"=> new {member.Name}{member.Constructor.ParametersSignature};");
				}

				writer.WriteLine();
			}

		writer.Indent--;
		writer.WriteLine('}');
		writer.WriteLine();

		// Extension methods
		writer.WriteLine($"public static class {unionModel.Name}UnionEx");
		writer.WriteLine('{');
		writer.Indent++;

		writer.Write($"public static Task<{unionModel.UnionDeclaration}> AsUnion{unionModel.GenericDeclaration}(");
		writer.WriteLine($"this Task<{unionModel.FullName}> task)");
		writer.WriteLine('{');
		writer.Indent++;

		writer.WriteLine($"var tcs = new TaskCompletionSource<{unionModel.UnionDeclaration}>();");
		writer.WriteLine("task.ContinueWith(t =>");
		writer.WriteLine('{');
		writer.Indent++;

		writer.WriteLine("if (t.IsFaulted) tcs.TrySetException(t.Exception.InnerExceptions);");
		writer.WriteLine("else if (t.IsCanceled) tcs.TrySetCanceled();");
		writer.WriteLine("else tcs.TrySetResult(t.Result);");

		writer.Indent--;
		writer.WriteLine("}, TaskContinuationOptions.ExecuteSynchronously);");
		writer.WriteLine();
		writer.WriteLine("return tcs.Task;");

		writer.Indent--;
		writer.WriteLine('}');

		writer.Indent--;
		writer.WriteLine('}');

		var generatedFileName = $"{unionModel.Name}.g.cs";
		context.AddSource(generatedFileName, output.ToString());
	}
}
