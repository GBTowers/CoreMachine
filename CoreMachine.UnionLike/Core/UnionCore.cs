using System.CodeDom.Compiler;
using CoreMachine.UnionLike.Data;
using CoreMachine.UnionLike.Model;
using Microsoft.CodeAnalysis;

namespace CoreMachine.UnionLike.Core;

public static class UnionCore
{
	public static void BuildUnion(SourceProductionContext context, UnionToGenerate? unionModel)
	{
		if (unionModel is null) return;
		var canAddImplicitOperators = true;

		Dictionary<string, UnionMemberToGenerate> distinctMembers = [];
		foreach (var member in unionModel.Members)
		{
			if (member.TypeParameters.Any()) continue;
			if (member.Constructor?.Parameters.Any() != true) continue;

			if (distinctMembers.ContainsKey(member.Constructor.TupleSignature))
			{
				canAddImplicitOperators = false;
				continue;
			}

			distinctMembers[member.Constructor.TupleSignature] = member;
		}


		using var output = new StringWriter();
		using var writer = new IndentedTextWriter(output, "\t");

		writer.WriteLine("// <auto-generated/>");
		writer.WriteLine("#nullable enable");
		writer.WriteLine("using System.Diagnostics.CodeAnalysis;");
		writer.WriteLine("using CoreMachine.UnionLike;");
		writer.WriteLine("using System.Threading.Tasks;");
		writer.WriteLine("using System;");
		writer.WriteLine();
		writer.WriteLine($"namespace {unionModel.Namespace};");
		writer.WriteLine();

		writer.Write(
			$"{unionModel.Modifiers.ToString()} record {unionModel.FullName} :");
		writer.WriteLine(
			$" Union<{unionModel.FullName}, {unionModel.Members.JoinSelect(m => $"{unionModel.FullName}.{m.Name}")}>");
		writer.WriteLine('{');
		writer.Indent++;

		writer.WriteLine($"private {unionModel.Name}() {{ }}");
		writer.WriteLine();

		foreach (var member in unionModel.Members)
		{
			writer.WriteLine($"{member.Modifiers} record {member.Name} : {unionModel.FullName};");
			writer.WriteLine();

			string? outVar = member.Name.FirstCharToLower();
			writer.WriteLine($"public bool Is{member.Name}([NotNullWhen(true)] out {member.Name}? {outVar})");
			writer.WriteLine('{');
			writer.Indent++;
			writer.WriteLine($"if (this is {member.Name} val)");
			writer.WriteLine('{');
			writer.Indent++;
			writer.WriteLine($"{outVar} = val;");
			writer.WriteLine("return true;");
			writer.Indent--;
			writer.WriteLine('}');
			writer.WriteLine();
			writer.WriteLine($"{outVar} = default;");
			writer.WriteLine("return false;");
			writer.Indent--;
			writer.WriteLine('}');
			writer.WriteLine();
		}

		if (canAddImplicitOperators)
			foreach (KeyValuePair<string, UnionMemberToGenerate> memberGroup in distinctMembers)
			{
				if (memberGroup.Value.Constructor is null)
					continue;

				if (memberGroup.Value.Constructor.Parameters.Count() > 1)
				{
					writer.WriteLine(
						$"public static implicit operator {unionModel.FullName}" +
						$"({memberGroup.Key} tuple)" +
						$" => new {memberGroup.Value.Name}({memberGroup.Value.TupleConstructor})");
				}
				else
				{
					writer.WriteLine(
						$"public static implicit operator {unionModel.FullName}{memberGroup.Value.Constructor}");
					writer.WriteLine(
						$"=> new {memberGroup.Value.Name}{memberGroup.Value.Constructor.ParametersSignature};");
				}

				writer.WriteLine();
			}

		writer.Indent--;
		writer.WriteLine('}');
		writer.WriteLine();

		// Extension methods
		writer.WriteLine($"public static class {unionModel.Name}Ex");
		writer.WriteLine('{');
		writer.Indent++;

		string matchTypeParams = unionModel.TypeParameters.Prepend("TOut").JoinString();

		// Match
		writer.Write($"public static async Task<TOut> Match<{matchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{unionModel.FullName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{m.FullName(unionModel.FullName)}, TOut> {m.VariableName}")},");
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Match({unionModel.Members.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// MatchAsync
		writer.Write($"public static async Task<TOut> MatchAsync<{matchTypeParams}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{unionModel.FullName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{m.FullName(unionModel.FullName)}, Task<TOut>> {m.VariableName}")},");
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".MatchAsync({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		string switchTypeParameters = unionModel.TypeParameters.JoinString();

		// Switch
		writer.WriteLine($"public static async Task Switch<{switchTypeParameters}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{unionModel.FullName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Action<{m.FullName(unionModel.FullName)}> {m.VariableName}")},");
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".Switch({unionModel.Members.JoinSelect(m => m.VariableName)});");
		writer.Indent--;
		writer.WriteLine();

		// SwitchAsync
		writer.WriteLine($"public static async Task SwitchAsync<{switchTypeParameters}>(");
		writer.Indent++;
		writer.WriteLine($"this Task<{unionModel.FullName}> task,");
		writer.WriteLine(
			$"{unionModel.Members.JoinSelect(m => $"Func<{m.FullName(unionModel.FullName)}, Task> {m.VariableName}")},");
		writer.WriteLine("bool continueOnCapturedContext = false)");
		writer.WriteLine("=> await (await task.ConfigureAwait(continueOnCapturedContext))");
		writer.WriteLine($".SwitchAsync({unionModel.Members.JoinSelect(m => m.VariableName)})");
		writer.WriteLine(".ConfigureAwait(continueOnCapturedContext);");
		writer.Indent--;
		writer.WriteLine();

		writer.Indent--;
		writer.WriteLine('}');

		var generatedFileName = $"{unionModel.Name}.g.cs";
		context.AddSource(generatedFileName, output.ToString());
	}
}
