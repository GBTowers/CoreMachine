using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.Text;
using CoreMachine.UnionLike.Data;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using CoreMachine.UnionLike.Attributes;
namespace CoreMachine.UnionLike;

[Generator]
public class UnionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(GenerateMarkerAttribute);

        IncrementalValuesProvider<UnionToGenerate> pipeline = context
            .SyntaxProvider
            .ForAttributeWithMetadataName(FullyQualifiedAttributeName,
                SyntaxPredicate,
                SemanticTransform)
            .Where(u => u is not null)!;

        var arities = pipeline.Collect()
            .Select((u, _)
                => u.Select(x => x.Members.Count()).Distinct().ToImmutableArray());

        context.RegisterSourceOutput(arities, GenerateArities);

        context.RegisterSourceOutput(pipeline, BuildUnion);
    }

    private record ArityMember(int Arity)
    {
        public string Name => "T" + Arity;
        public string NameVariable => "t" + Arity;
        public string FuncName => "f" + Arity;
        public string FuncDeclaration => $"Func<{Name}, TOut>";
        public string AsyncFuncDeclaration => $"Func<{Name}, Task<TOut>>";
        public string ActName => "a" + Arity;
        public string ActDeclaration => $"Action<{Name}>";
        public string AsyncActDeclaration => $"Func<{Name}, Task>";
    }

    private static void GenerateArities(SourceProductionContext context, ImmutableArray<int> arities)
    {
        foreach (int arity in arities)
        {
            ArityMember[] arityMembers = Enumerable.Range(1, arity).Select(i => new ArityMember(i)).ToArray();

            using var output = new StringWriter();
            using var writer = new IndentedTextWriter(output);

            writer.WriteLine("// <auto-generated/>");
            writer.WriteLine("#nullable enable");
            writer.WriteLine("using System;");
            writer.WriteLine("using System.Threading.Tasks;");
            writer.WriteLine();
            writer.WriteLine($"namespace CoreMachine.UnionLike;");
            writer.WriteLine();
            
            var declaration = $"Union<T, {arityMembers.JoinSelect(m => m.Name)}>";
            writer.WriteLine($"public abstract record {declaration}");
            writer.Indent++;
            writer.WriteLine($"where T : {declaration}");
            foreach (var member in arityMembers)
            {
                writer.WriteLine($"where {member.Name} : T");
            }

            writer.Indent--;

            writer.WriteLine('{');
            writer.Indent++;

            // Match
            writer.WriteLine(
                $"public TOut Match<TOut>({arityMembers.JoinSelect(m => $"{m.FuncDeclaration} {m.FuncName}")}) =>");
            WriteSwitchExpression(writer, arityMembers);

            // MatchAsync
            writer.WriteLine(
                $"public Task<TOut> MatchAsync<TOut>({arityMembers.JoinSelect(m => $"{m.AsyncFuncDeclaration} {m.FuncName}")}) =>");
            WriteSwitchExpression(writer, arityMembers);

            // Switch
            writer.WriteLine(
                $"public void Switch({arityMembers.JoinSelect(m => $"{m.ActDeclaration} {m.ActName}")})");
            writer.WriteLine('{');
            writer.Indent++;
            writer.WriteLine("switch (this)");
            writer.WriteLine('{');
            writer.Indent++;
            foreach (var member in arityMembers)
            {
                writer.WriteLine(
                    $"case {member.Name} {member.NameVariable}: {member.ActName}({member.NameVariable}); break;");
            }

            writer.Indent--;
            writer.WriteLine('}');
            writer.Indent--;
            writer.WriteLine('}');
            writer.WriteLine();

            // SwitchAsync
            writer.WriteLine(
                $"public Task SwitchAsync({arityMembers.JoinSelect(m => $"{m.AsyncActDeclaration} {m.ActName}")}) =>");
            writer.Indent++;
            writer.WriteLine("this switch");
            writer.WriteLine('{');
            writer.Indent++;
            foreach (var member in arityMembers)
            {
                writer.WriteLine($"{member.Name} {member.NameVariable} => {member.ActName}({member.NameVariable}),");
            }

            writer.WriteLine("_ => throw new InvalidOperationException()");
            writer.Indent--;
            writer.WriteLine("};");
            writer.Indent--;
            writer.WriteLine();
            
            writer.Indent--;
            writer.WriteLine('}');
            
            var generatedFileName = $"Union.T{arity}.g.cs";
            context.AddSource(generatedFileName, output.ToString());
        }
    }

    private static void WriteSwitchExpression(IndentedTextWriter writer, ArityMember[] arityMembers)
    {
        writer.Indent++;
        writer.WriteLine("this switch");
        writer.WriteLine('{');
        writer.Indent++;
        foreach (var member in arityMembers)
        {
            writer.WriteLine($"{member.Name} {member.NameVariable} => {member.FuncName}({member.NameVariable}),");
        }

        writer.WriteLine("_ => throw new InvalidOperationException()");
        writer.Indent--;
        writer.WriteLine("};");
        writer.Indent--;
        writer.WriteLine();
    }

    private static void BuildUnion(SourceProductionContext context, UnionToGenerate? unionModel)
    {
        if (unionModel is null) return;
        using var output = new StringWriter();
        using var writer = new IndentedTextWriter(output);

        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine("#nullable enable");
        writer.WriteLine("using System.Diagnostics.CodeAnalysis;");
        writer.WriteLine("using CoreMachine.UnionLike;");
        // writer.WriteLine("using System.Threading.Tasks;");
        writer.WriteLine();
        writer.WriteLine($"namespace {unionModel.Namespace};");
        writer.WriteLine();

        writer.Write(
            $"{unionModel.Modifiers.ToString()} record {unionModel.FullName} :");
        writer.WriteLine(
            $" Union<{unionModel.FullName}, {unionModel.Members.JoinSelect(m => $"{unionModel.FullName}.{m.Name}")}>");
        writer.WriteLine('{');
        writer.Indent++;

        writer.WriteLine($"private {unionModel.Name}() {{ }}");
        writer.WriteLine();

        foreach (var member in unionModel.Members)
        {
            writer.WriteLine($"{member.Modifiers} record {member.Name} : {unionModel.FullName};");
            writer.WriteLine();

            string outVar = member.Name.ToLowerInvariant();
            writer.WriteLine($"public bool Is{member.Name}([NotNullWhen(true)] out {member.Name}? {outVar})");
            writer.WriteLine('{');
            writer.Indent++;
            writer.WriteLine($"if (this is {member.Name} val)");
            writer.WriteLine('{');
            writer.Indent++;
            writer.WriteLine($"{outVar} = val;");
            writer.WriteLine("return true;");
            writer.Indent--;
            writer.WriteLine('}');
            writer.WriteLine();
            writer.WriteLine($"{outVar} = default;");
            writer.WriteLine("return false;");
            writer.Indent--;
            writer.WriteLine('}');
            writer.WriteLine();
        }

        writer.Indent--;
        writer.WriteLine('}');
        //
        // writer.WriteLine();
        //
        // writer.WriteLine($"public static class {unionModel.Name}Ex");
        // writer.WriteLine('{');
        // writer.Indent++;
        // writer.Write($"public static async Task<TOut> Match{unionModel.GenericDeclaration}");
        // writer.WriteLine($"(this Task<>)");
        //
        var generatedFileName = $"{unionModel.Name}.g.cs";
        context.AddSource(generatedFileName, output.ToString());
    }

    private static UnionToGenerate? SemanticTransform(
        GeneratorAttributeSyntaxContext context,
        CancellationToken token)
    {
        if (context.TargetNode is not RecordDeclarationSyntax candidate) return null;


        List<UnionMemberToGenerate> candidateMembers = [];
        foreach (var member in candidate.Members)
        {
            if (member is not RecordDeclarationSyntax recordMember
                || !recordMember.Modifiers.Any(SyntaxKind.PartialKeyword)
                || recordMember.Modifiers.Any(SyntaxKind.PrivateKeyword))
                continue;


            EquatableArray<RecordConstructor> constructors = recordMember.Members
                .Select(m =>
                {
                    if (m is not ConstructorDeclarationSyntax constructor) return null;
                    EquatableArray<ConstructorParameter> parameters = constructor.ParameterList.Parameters
                        .Select(p => new ConstructorParameter(p.Type?.ToString(), p.Identifier.Text))
                        .ToImmutableArray();

                    return new RecordConstructor(constructor.Modifiers, parameters);
                })
                .Where(m => m is not null)
                .ToImmutableArray()!;


            var modifiers = recordMember.Modifiers;
            if (!modifiers.Any(SyntaxKind.SealedKeyword))
            {
                modifiers = modifiers.Insert(Math.Max(modifiers.IndexOf(SyntaxKind.PartialKeyword) - 1,
                        0),
                    SyntaxFactory.Token(SyntaxKind.SealedKeyword));
            }

            if (!modifiers.Any(SyntaxKind.PublicKeyword) && !modifiers.Any(SyntaxKind.InternalKeyword))
            {
                modifiers = modifiers.Insert(0,
                    SyntaxFactory.Token(SyntaxKind.PublicKeyword));
            }

            candidateMembers.Add(new UnionMemberToGenerate(recordMember.Identifier.Text,
                string.Join(" ", modifiers),
                ExtractTypeParameters(recordMember),
                constructors));
        }

        EquatableArray<UnionMemberToGenerate> members = candidateMembers.ToImmutableArray();

        return new UnionToGenerate(
            context.TargetSymbol.ContainingNamespace.ToDisplayString(),
            context.TargetSymbol.Name,
            members,
            candidate.Modifiers,
            ExtractTypeParameters(candidate));
    }

    private static ImmutableArray<string> ExtractTypeParameters(RecordDeclarationSyntax recordMember) =>
        recordMember.TypeParameterList?.Parameters
            .Select(p => p.Identifier.Text).ToImmutableArray() ?? [];

    private static bool SyntaxPredicate(SyntaxNode node, CancellationToken token) 
        => node is RecordDeclarationSyntax candidate && candidate.Modifiers.Any(SyntaxKind.PartialKeyword);

    private static void GenerateMarkerAttribute(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource($"{FullyQualifiedAttributeName}.g.cs",
            SourceText.From(UnionAttribute, Encoding.UTF8));
    }


    private static readonly string AttributeNamespace = "CoreMachine.UnionLike.Attributes";
    private static readonly string FullyQualifiedAttributeName = AttributeNamespace + '.' + nameof(UnionAttribute);

    private static readonly string GeneratedCodeAttribute =
        $"""[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{typeof(UnionGenerator).Namespace}", "1.0.0")]""";


     public static readonly string UnionAttribute =
         $$"""
           // <auto-generated/>
           #nullable enable

           namespace {{AttributeNamespace}};
           {{GeneratedCodeAttribute}}
           [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
           public class UnionAttribute : global::System.Attribute
           {
           }

           """;
}