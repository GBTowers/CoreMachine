using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using CoreMachine.UnionLike;
using CoreMachine.UnionLike.Data;
using CoreMachine.UnionLike.Diagnosis;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace CoreMachine.UnionLike;

[Generator]
public class UnionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(InitializationCallback);

        var pipeline = context
            .SyntaxProvider
            .ForAttributeWithMetadataName(GenerationCore.FullyQualifiedAttributeName,
                SyntaxPredicate,
                SemanticTransform);

        context.RegisterSourceOutput(pipeline, static (context, unionModel) =>
        {
            if (unionModel == null) return;
            StringBuilder sourceBuilder = new($$"""
                                                // <auto-generated/>
                                                namespace {{unionModel.Namespace}};

                                                public partial record {{unionModel.Name}}
                                                {
                                                }

                                                """);

            var generatedFileName = $"{unionModel.Name}.g.cs";
            context.AddSource(generatedFileName, sourceBuilder.ToString());
        });
    }

    private static UnionToGenerate? SemanticTransform(
        GeneratorAttributeSyntaxContext context,
        CancellationToken token)
    {
        if (context.TargetNode is not RecordDeclarationSyntax candidate) return null;


        return new UnionToGenerate(
            context.TargetSymbol.ContainingNamespace.ToDisplayString(),
            context.TargetSymbol.Name, candidate.Members.Select(m =>
            {
                if (m is RecordDeclarationSyntax rs 
                    && rs.Modifiers.Any(SyntaxKind.PartialKeyword))
                {
                    return rs.Identifier.Text;
                }

                return null;
            }).ToImmutableArray()!);
    }

    private sealed record UnionToGenerate(string Namespace, string Name, EquatableArray<string> PrivateRecordMembers);

    private static bool SyntaxPredicate(SyntaxNode node, CancellationToken token)
    {
        return node is RecordDeclarationSyntax candidate && candidate.Modifiers.Any(SyntaxKind.PartialKeyword);
    }

    private static void InitializationCallback(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource("Roslyn.Generated.UnionAttribute.g.cs",
            SourceText.From(GenerationCore.UnionAttribute, Encoding.UTF8));
    }
}