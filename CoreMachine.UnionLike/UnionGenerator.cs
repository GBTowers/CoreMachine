using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using CoreMachine.UnionLike;
using CoreMachine.UnionLike.Data;
using CoreMachine.UnionLike.Diagnosis;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace CoreMachine.UnionLike;

[Generator]
public class UnionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(InitializationCallback);

        IncrementalValuesProvider<UnionToGenerate?> pipeline = context
            .SyntaxProvider
            .ForAttributeWithMetadataName(FullyQualifiedAttributeName,
                SyntaxPredicate,
                SemanticTransform);

        context.RegisterSourceOutput(pipeline, BuildSourceCode);
    }

    private static void BuildSourceCode(SourceProductionContext context, UnionToGenerate? unionModel)
    {
        if (unionModel == null) return;
        using var output = new StringWriter();
        using var writer = new IndentedTextWriter(output);

        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine("#nullable enable");
        writer.WriteLine("using System.Diagnostics.CodeAnalysis;");
        writer.WriteLine();
        writer.WriteLine($"namespace {unionModel.Namespace};");
        writer.WriteLine();
        writer.WriteLine($"{unionModel.Modifiers.ToString()} record {unionModel.Name}");
        writer.WriteLine('{');
        writer.Indent++;

        writer.WriteLine($"private {unionModel.Name}() {{ }}");
        writer.WriteLine();
        
        foreach (UnionMemberToGenerate member in unionModel.Members)
        {
            writer.WriteLine($"{member.Modifiers} record {member.Name} : {unionModel.Name};");
            writer.WriteLine();

            string outVar = member.Name.ToLowerInvariant();
            writer.WriteLine($"public bool Is{member.Name}([NotNullWhen(true)] out {member.Name}? {outVar})");
            writer.WriteLine('{');
            writer.Indent++;
            writer.WriteLine($"if (this is {member.Name} val)");
            writer.WriteLine('{');
            writer.Indent++;
            writer.WriteLine($"{outVar} = val;");
            writer.WriteLine("return true;");
            writer.Indent--;
            writer.WriteLine('}');
            writer.WriteLine();
            writer.WriteLine($"{outVar} = default;");
            writer.WriteLine("return false;");
            writer.Indent--;
            writer.WriteLine('}');
            writer.WriteLine();
        }

        writer.Indent--;
        writer.WriteLine('}');

        var generatedFileName = $"{unionModel.Name}.g.cs";
        context.AddSource(generatedFileName, output.ToString());
    }

    private static UnionToGenerate? SemanticTransform(
        GeneratorAttributeSyntaxContext context,
        CancellationToken token)
    {
        if (context.TargetNode is not RecordDeclarationSyntax candidate) return null;


        List<UnionMemberToGenerate> candidateMembers = [];
        foreach (var member in candidate.Members)
        {
            if (member is not RecordDeclarationSyntax recordMember
                || !recordMember.Modifiers.Any(SyntaxKind.PartialKeyword)
                || recordMember.Modifiers.Any(SyntaxKind.PrivateKeyword))
                continue;
            
            var modifiers = recordMember.Modifiers;
            if (!modifiers.Any(SyntaxKind.SealedKeyword))
            {
                modifiers = modifiers.Insert(Math.Max(modifiers.IndexOf(SyntaxKind.PartialKeyword) - 1, 0),
                    SyntaxFactory.Token(SyntaxKind.SealedKeyword));
            }

            if (!modifiers.Any(SyntaxKind.PublicKeyword) && !modifiers.Any(SyntaxKind.InternalKeyword))
            {
                modifiers = modifiers.Insert(0, SyntaxFactory.Token(SyntaxKind.PublicKeyword));
            }

            candidateMembers.Add(new UnionMemberToGenerate(recordMember.Identifier.Text,
                string.Join(" ", modifiers)));
        }

        EquatableArray<UnionMemberToGenerate> members = candidateMembers.ToImmutableArray();

        return new UnionToGenerate(
            context.TargetSymbol.ContainingNamespace.ToDisplayString(),
            context.TargetSymbol.Name, members, candidate.Modifiers);
    }

    private static bool SyntaxPredicate(SyntaxNode node, CancellationToken token)
    {
        return node is RecordDeclarationSyntax candidate && candidate.Modifiers.Any(SyntaxKind.PartialKeyword);
    }

    private static void InitializationCallback(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource("Roslyn.Generated.UnionAttribute.g.cs",
            SourceText.From(UnionAttribute, Encoding.UTF8));
    }


    private static readonly string NameSpace = "Roslyn.Generated";

    private static readonly string GeneratedCodeAttribute =
        $"""[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{typeof(UnionGenerator).Namespace}", "1.0.0")]""";

    private static readonly string FullyQualifiedAttributeName = NameSpace + '.' + nameof(UnionAttribute);

    public static readonly string UnionAttribute =
        $$"""
          // <auto-generated/>
          #nullable enable

          namespace {{NameSpace}};
          {{GeneratedCodeAttribute}}
          [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
          public class UnionAttribute : global::System.Attribute
          {
          }

          """;
}