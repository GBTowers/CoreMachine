//HintName: Result.g.cs
// <auto-generated/>
#nullable enable
using System.Diagnostics.CodeAnalysis;
using CoreMachine.UnionLike;
using System.Threading.Tasks;
using System;

namespace Tests;

public partial record Result<T, TE> : Union<Result<T, TE>, Result<T, TE>.Ok, Result<T, TE>.Err>
{
	private Result() { }
	
	public sealed partial record Ok : Result<T, TE>;
	
	public bool IsOk([NotNullWhen(true)] out Ok? ok)
	{
		if (this is Ok val)
		{
			ok = val;
			return true;
		}
		
		ok = default;
		return false;
	}
	
	public sealed partial record Err : Result<T, TE>;
	
	public bool IsErr([NotNullWhen(true)] out Err? err)
	{
		if (this is Err val)
		{
			err = val;
			return true;
		}
		
		err = default;
		return false;
	}
	
	public static implicit operator Result<T, TE>(T Value)
	=> new Ok(Value);
	
	public static implicit operator Result<T, TE>(TE Error)
	=> new Err(Error);
	
}

public static class ResultEx
{
	public static async Task<TOut> Match<TOut, T, TE>(this Task<Result<T, TE>> task,
		Func<Result<T, TE>.Ok, TOut> ok,
		Func<Result<T, TE>.Err, TOut> err,
		bool continueOnCapturedContext = false)
		=> (await task.ConfigureAwait(continueOnCapturedContext))
		.Match(ok, err);
	
	public static async Task<TOut> MatchAsync<TOut, T, TE>(this Task<Result<T, TE>> task,
		Func<Result<T, TE>.Ok, Task<TOut>> ok,
		Func<Result<T, TE>.Err, Task<TOut>> err,
		bool continueOnCapturedContext = false)
		=> await (await task.ConfigureAwait(continueOnCapturedContext))
		.MatchAsync(ok, err)
		.ConfigureAwait(continueOnCapturedContext);
	
	public static async Task Switch<T, TE>(
		this Task<Result<T, TE>> task,
		Action<Result<T, TE>.Ok> ok,
		Action<Result<T, TE>.Err> err,
		bool continueOnCapturedContext = false)
		=> (await task.ConfigureAwait(continueOnCapturedContext))
		.Switch(ok, err);
	
	public static async Task SwitchAsync<T, TE>(
		this Task<Result<T, TE>> task,
		Func<Result<T, TE>.Ok, Task> ok,
		Func<Result<T, TE>.Err, Task> err,
		bool continueOnCapturedContext = false)
		=> await (await task.ConfigureAwait(continueOnCapturedContext))
		.SwitchAsync(ok, err)
		.ConfigureAwait(continueOnCapturedContext);
	
}
