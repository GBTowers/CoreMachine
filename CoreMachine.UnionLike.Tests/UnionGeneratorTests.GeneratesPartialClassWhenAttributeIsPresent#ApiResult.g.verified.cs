//HintName: ApiResult.g.cs
// <auto-generated/>

#nullable enable
using System.Diagnostics.CodeAnalysis;
using CoreMachine.UnionLike;
using System.Threading.Tasks;
using System;

namespace Tests;

public partial record ApiResult : Union<ApiResult, ApiResult.Ok, ApiResult.BadRequest>
{
	private ApiResult() { }

	public bool IsOk([NotNullWhen(true)] out Ok? ok)
	{
		if (this is Ok val)
		{
			ok = val;
			return true;
		}

		ok = default;
		return false;
	}

	public bool IsBadRequest([NotNullWhen(true)] out BadRequest? badrequest)
	{
		if (this is BadRequest val)
		{
			badrequest = val;
			return true;
		}

		badrequest = default;
		return false;
	}

	public sealed partial record Ok : ApiResult;

	public sealed partial record BadRequest : ApiResult;
}

public static class ApiResultEx
{
	public static async Task<TOut> Match<TOut>(this Task<ApiResult> task,
		Func<ApiResult.Ok, TOut> ok, Func<ApiResult.BadRequest, TOut> badrequest,
		bool continueOnCapturedContext = false)
		=> (await task.ConfigureAwait(continueOnCapturedContext))
			.Match(ok, badrequest);

	public static async Task<TOut> MatchAsync<TOut>(this Task<ApiResult> task,
		Func<ApiResult.Ok, Task<TOut>> ok, Func<ApiResult.BadRequest, Task<TOut>> badrequest,
		bool continueOnCapturedContext = false)
		=> await (await task.ConfigureAwait(continueOnCapturedContext))
			.MatchAsync(ok, badrequest)
			.ConfigureAwait(continueOnCapturedContext);

	public static async Task Switch(
		this Task<ApiResult> task,
		Action<ApiResult.Ok> ok, Action<ApiResult.BadRequest> badrequest,
		bool continueOnCapturedContext = false)
		=> (await task.ConfigureAwait(continueOnCapturedContext))
			.Switch(ok, badrequest);

	public static async Task SwitchAsync(
		this Task<ApiResult> task,
		Func<ApiResult.Ok, Task> ok, Func<ApiResult.BadRequest, Task> badrequest,
		bool continueOnCapturedContext = false)
		=> await (await task.ConfigureAwait(continueOnCapturedContext))
			.SwitchAsync(ok, badrequest)
			.ConfigureAwait(continueOnCapturedContext);
}