using System.Text;
using Microsoft.CodeAnalysis.Text;
using VerifyCs = CoreMachine.UnionLike.Test.CSharpSourceGeneratorVerifier<CoreMachine.UnionLike.UnionGenerator>;

namespace CoreMachine.UnionLike.Test;

public class UnionGeneratorTests
{
    [Fact]
    public async Task GeneratesUnionAttributeUnconditionally()
    {
        const string code = """
                            using System;
                            using Roslyn.Generated;

                            namespace Tests;

                            public record ApiResult;

                            """;

        var expected =
            $$"""
            // <auto-generated/>
            #nullable enable

            namespace Roslyn.Generated;
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{typeof(GenerationCore).Namespace}}", "1.0.0")]
            [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
            public class UnionAttribute : global::System.Attribute
            {
            }

            """;

        await new VerifyCs.Test
        {
            TestState =
            {
                Sources = { code },
                GeneratedSources =
                {
                    (typeof(UnionGenerator), "Roslyn.Generated.UnionAttribute.g.cs",
                        SourceText.From(expected, Encoding.UTF8))
                }
            }
        }.RunAsync();
    }
}
