using System.Diagnostics.CodeAnalysis;
using System.Text;
using Microsoft.CodeAnalysis.Text;
using VerifyCs = CoreMachine.UnionLike.Test.CSharpSourceGeneratorVerifier<CoreMachine.UnionLike.UnionGenerator>;

namespace CoreMachine.UnionLike.Test;

public class UnionGeneratorTests
{
    private readonly string _expectedUnionAttribute =
        $$"""
          // <auto-generated/>
          #nullable enable

          namespace Roslyn.Generated;
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{typeof(UnionGenerator).Namespace}}", "1.0.0")]
          [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
          public class UnionAttribute : global::System.Attribute
          {
          }

          """;

    [Fact]
    public async Task GeneratesPartialClassWhenAttributeIsPresent()
    {
        const string code = """
                            using System;
                            using Roslyn.Generated;

                            namespace Tests;
                            [Union]
                            public partial record ApiResult
                            {
                                partial record Ok;
                            }

                            """;

        await new VerifyCs.Test
        {
            TestState =
            {
                Sources = { code },
                GeneratedSources =
                {
                    (typeof(UnionGenerator), "Roslyn.Generated.UnionAttribute.g.cs",
                        SourceText.From(_expectedUnionAttribute, Encoding.UTF8)),
                    (typeof(UnionGenerator), "ApiResult.g.cs",
                        """
                        // <auto-generated/>
                        #nullable enable
                        using System.Diagnostics.CodeAnalysis;
                        
                        namespace Tests;
                        
                        public partial record ApiResult
                        {
                            private ApiResult() { }
                            public sealed partial record Ok : ApiResult;
                            
                            public bool IsOk([NotNullWhen(true)] out Ok? ok)
                            {
                                if (this is Ok val)
                                {
                                    ok = val;
                                    return true;
                                }
                                
                                ok = default;
                                return false;
                            }
                            
                        }
                        
                        """)
                }
            }
        }.RunAsync();
    }

    [Fact]
    public async Task GeneratesUnionAttributeUnconditionally()
    {
        const string code = """
                            using System;
                            using Roslyn.Generated;

                            namespace Tests;

                            public partial record ApiResult
                            {
                                private partial record Ok;
                            }    

                            """;

        var expected =
            $$"""
              // <auto-generated/>
              #nullable enable

              namespace Roslyn.Generated;
              [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{typeof(UnionGenerator).Namespace}}", "1.0.0")]
              [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
              public class UnionAttribute : global::System.Attribute
              {
              }

              """;

        await new VerifyCs.Test
        {
            TestState =
            {
                Sources = { code },
                GeneratedSources =
                {
                    (typeof(UnionGenerator), "Roslyn.Generated.UnionAttribute.g.cs",
                        SourceText.From(expected, Encoding.UTF8))
                }
            }
        }.RunAsync();
    }
}