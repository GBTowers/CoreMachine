using System.Diagnostics.CodeAnalysis;
using System.Text;
using Microsoft.CodeAnalysis.Text;
using VerifyCs = CoreMachine.UnionLike.Test.CSharpSourceGeneratorVerifier<CoreMachine.UnionLike.UnionGenerator>;

namespace CoreMachine.UnionLike.Test;

public class UnionGeneratorTests
{
    private readonly string _expectedUnionAttribute =
        $$"""
          // <auto-generated/>
          #nullable enable

          namespace CoreMachine.UnionLike.Attributes;
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{typeof(UnionGenerator).Namespace}}", "1.0.0")]
          [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
          public class UnionAttribute : global::System.Attribute
          {
          }

          """;
    
    private readonly string _expectedUnionArity =
          """
          // <auto-generated/>
          #nullable enable
          using System;
          using System.Threading.Tasks;
          
          namespace CoreMachine.UnionLike;
          
          public abstract record Union<T, T1>
              where T : Union<T, T1>
              where T1 : T
          {
              public TOut Match<TOut>(Func<T1, TOut> f1) =>
                  this switch
                  {
                      T1 t1 => f1(t1),
                      _ => throw new InvalidOperationException()
                  };
              
              public Task<TOut> MatchAsync<TOut>(Func<T1, Task<TOut>> f1) =>
                  this switch
                  {
                      T1 t1 => f1(t1),
                      _ => throw new InvalidOperationException()
                  };
              
              public void Switch(Action<T1> a1)
              {
                  switch (this)
                  {
                      case T1 t1: a1(t1); break;
                  }
              }
              
              public Task SwitchAsync(Func<T1, Task> a1) =>
                  this switch
                  {
                      T1 t1 => a1(t1),
                      _ => throw new InvalidOperationException()
                  };
              
          }
          
          """;

    [Fact]
    public async Task GeneratesPartialClassWhenAttributeIsPresent()
    {
        const string code = """
                            using System;
                            using CoreMachine.UnionLike.Attributes;

                            namespace Tests;
                            
                            [Union]
                            public partial record ApiResult
                            {
                                partial record Ok;
                            }

                            """;

        await new VerifyCs.Test
        {
            TestState =
            {
                Sources = { code },
                GeneratedSources =
                {
                    (typeof(UnionGenerator), "CoreMachine.UnionLike.Attributes.UnionAttribute.g.cs",
                        SourceText.From(_expectedUnionAttribute, Encoding.UTF8)),
                    (typeof(UnionGenerator), "Union.T1.g.cs",
                        SourceText.From(_expectedUnionArity, Encoding.UTF8)),   
                    (typeof(UnionGenerator), "ApiResult.g.cs",
                        """
                        // <auto-generated/>
                        #nullable enable
                        using System.Diagnostics.CodeAnalysis;
                        using CoreMachine.UnionLike;
                        using System.Threading.Tasks;
                        using System;
                        
                        namespace Tests;
                        
                        public partial record ApiResult : Union<ApiResult, ApiResult.Ok>
                        {
                            private ApiResult() { }
                            
                            public sealed partial record Ok : ApiResult;
                            
                            public bool IsOk([NotNullWhen(true)] out Ok? ok)
                            {
                                if (this is Ok val)
                                {
                                    ok = val;
                                    return true;
                                }
                                
                                ok = default;
                                return false;
                            }
                            
                        }
                        
                        public static class ApiResultEx
                        {
                            public static async Task<TOut> Match<TOut>(this Task<ApiResult> task,
                                Func<ApiResult.Ok, TOut> ok,
                                bool continueOnCapturedContext = false)
                                => (await task.ConfigureAwait(continueOnCapturedContext))
                                .Match(ok);
                            
                            public static async Task<TOut> MatchAsync<TOut>(this Task<ApiResult> task,
                                Func<ApiResult.Ok, Task<TOut>> ok,
                                bool continueOnCapturedContext = false)
                                => await (await task.ConfigureAwait(continueOnCapturedContext))
                                .MatchAsync(ok)
                                .ConfigureAwait(continueOnCapturedContext);
                            
                            public static async Task Switch(
                                this Task<ApiResult> task,
                                Action<ApiResult.Ok> ok,
                                bool continueOnCapturedContext = false)
                                => (await task.ConfigureAwait(continueOnCapturedContext))
                                .Switch(ok);
                            
                            public static async Task SwitchAsync(
                                this Task<ApiResult> task,
                                Func<ApiResult.Ok, Task> ok,
                                bool continueOnCapturedContext = false)
                                => await (await task.ConfigureAwait(continueOnCapturedContext))
                                .SwitchAsync(ok)
                                .ConfigureAwait(continueOnCapturedContext);
                            
                        }
                        
                        """)
                }
            }
        }.RunAsync();
    }

    [Fact]
    public async Task GeneratesUnionAttributeUnconditionally()
    {
        const string code = """
                            using System;
                            using CoreMachine.UnionLike.Attributes;

                            namespace Tests;

                            public partial record ApiResult
                            {
                                private partial record Ok;
                            }    

                            """;

        await new VerifyCs.Test
        {
            TestState =
            {
                Sources = { code },
                GeneratedSources =
                {
                    (typeof(UnionGenerator), "CoreMachine.UnionLike.Attributes.UnionAttribute.g.cs",
                        SourceText.From(_expectedUnionAttribute, Encoding.UTF8))
                }
            }
        }.RunAsync();
    }
}